// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum SubscriptionType {
  MINI_GOLDI
  GOLDI
  DEMO
}

enum RequisiteType {
  Card
  Yoomoney
}

enum PartnerBonusStatus {
  PENDING
  COMPLETED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  IN_PROGRESS
}

enum PaymentStatus {
  PENDING
  COMPLETED
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Visitor {
  id            String   @id @default(uuid())
  trafficSource String
  utmTags       String?
  country       String
  device        String
  browser       String
  pagesViewed   Int      @default(1)
  timeOnSite    String
  cookieFile    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("visitors")
}

model User {
  id           Int           @id @default(autoincrement())
  partnerId    Int?
  partner      Partner?      @relation(fields: [partnerId], references: [id])
  firstName    String
  lastName     String?
  middleName   String?
  username     String
  phone        String
  email        String
  subscription Subscription?
  account      String

  @@map("users")
}

model Partner {
  id            Int                @id @default(autoincrement())
  name          String
  username      String
  requisites    String
  requisiteType RequisiteType
  bonusStatus   PartnerBonusStatus
  code          String
  users         User[]

  createdAt DateTime @default(now())

  @@map("partners")
}

model Notification {
  id        Int      @id @default(autoincrement())
  text      String
  end       DateTime
  createdAt DateTime @default(now())
}

model Admin {
  id              Int      @id @default(autoincrement())
  login           String
  password        String
  authentificator Int?
  twoFa           Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  @@map("admins")
}

model Subscription {
  id     String           @id @default(uuid())
  type   SubscriptionType
  userId Int              @unique
  user   User             @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model Request {
  id          Int           @id @default(autoincrement())
  fullName    String
  phone       String
  email       String
  telegram    String?
  partnerCode String?
  source      String
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("requests")
}

model PromoCode {
  id              Int       @id @default(autoincrement())
  code            String    @unique
  discountPercent Int?
  discountAmount  Int?
  isActive        Boolean   @default(true)
  usageLimit      Int?
  usageCount      Int       @default(0)
  expiresAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  payments Payment[]

  @@map("promo_codes")
}

model Payment {
  id          Int           @id @default(autoincrement())
  fullName    String
  email       String
  source      String
  product     String
  amount      Int // amount in kopecks
  promoCodeId Int?
  promoCode   PromoCode?    @relation(fields: [promoCodeId], references: [id])
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("payments")
}

model Button {
  id          Int      @id @default(autoincrement())
  name        String
  type        String
  url         String?
  description String?
  isActive    Boolean  @default(true)
  clickCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("buttons")
}
